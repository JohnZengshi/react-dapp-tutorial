/*
 * @LastEditors: John
 * @Date: 2024-01-07 17:41:03
 * @LastEditTime: 2024-01-08 13:34:51
 * @Author: John
 */
/* This file was initially auto-generated by https://github.com/pmndrs/gltfjsx and then adapted manually */

import * as THREE from "three";
import { Center, Environment, useGLTF } from "@react-three/drei";
import { Color } from "three";
import { useEffect, useMemo, useRef, useState, useTransition } from "react";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import { PresetsType } from "@react-three/drei/helpers/environment-assets";

export default function Shoe({ ...props }: any) {
  // const { nodes, materials } = useGLTF("/shoe.gltf");

  const { nodes, materials } = useGLTF("/roos.glb");
  const _mesh =
    useRef<
      THREE.Mesh<
        THREE.BufferGeometry<THREE.NormalBufferAttributes>,
        THREE.Material | THREE.Material[],
        THREE.Object3DEventMap
      >
    >(null);
  const stripe = useRef<THREE.MeshBasicMaterial>(null);
  const light = useRef<THREE.PointLight>(null);

  // const { roughness } = useControls({
  //   roughness: { value: 1, min: 0, max: 1 },
  // });

  useEffect(() => {
    console.log("roos:", nodes, materials);
  }, [nodes, materials]);

  return (
    <group {...props}>
      <mesh
        ref={_mesh}
        castShadow
        receiveShadow
        geometry={(nodes["立方体"] as any).geometry}
        material={materials["材质"]}
      >
        {/* <sphereGeometry /> */}
        {/* <meshStandardMaterial metalness={1} roughness={roughness} /> */}
        {/* <meshStandardMaterial
          color={Color.NAMES.blue}
          aoMap={(materials["材质"] as any).aoMap}
          normalMap={(materials["材质"] as any).normalMap}
          roughnessMap={(materials["材质"] as any).roughnessMap}
          metalnessMap={(materials["材质"] as any).metalnessMap}
          envMapIntensity={0.8}
        /> */}
      </mesh>
    </group>
  );
}

useGLTF.preload("/roos.glb");

export function Env() {
  const [preset, setPreset] = useState<PresetsType>("apartment");
  // You can use the "inTransition" boolean to react to the loading in-between state,
  // For instance by showing a message
  // const [inTransition, startTransition] = useTransition();
  // const { blur } = useControls({
  //   blur: { value: 0.65, min: 0, max: 1 },
  //   preset: {
  //     value: preset,
  //     options: [
  //       "sunset",
  //       "dawn",
  //       "night",
  //       "warehouse",
  //       "forest",
  //       "apartment",
  //       "studio",
  //       "city",
  //       "park",
  //       "lobby",
  //     ],
  //     // If onChange is present the value will not be reactive, see https://github.com/pmndrs/leva/blob/main/docs/advanced/controlled-inputs.md#onchange
  //     // Instead we transition the preset value, which will prevents the suspense bound from triggering its fallback
  //     // That way we can hang onto the current environment until the new one has finished loading ...
  //     onChange: (value) => startTransition(() => setPreset(value)),
  //   },
  // });

  return <Environment preset={"apartment"} background blur={1} />;
}
